#!/bin/bash

# MavrkScribe AWS Deployment Script
# This script deploys the AWS backend and configures the app

echo "üöÄ MavrkScribe AWS Deployment Script"
echo "====================================="
echo ""

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get current OpenAI API key from .env
OPENAI_KEY=$(grep OPENAI_API_KEY .env | cut -d '=' -f2)

if [ -z "$OPENAI_KEY" ]; then
    echo -e "${RED}‚ùå No OpenAI API key found in .env file${NC}"
    echo "Please add your OpenAI API key to the .env file first"
    exit 1
fi

echo -e "${GREEN}‚úÖ Found OpenAI API key in .env${NC}"
echo ""

# Step 1: Deploy CDK Stack
echo "Step 1: Deploying AWS CDK Stack..."
echo "-----------------------------------"
cd /Users/akshaykumar/Desktop/mavrk-desktop-cdk

# Install CDK dependencies
echo "Installing CDK dependencies..."
npm install

# Build TypeScript
echo "Building CDK TypeScript..."
npm run build

# Deploy the stack
echo "Deploying CDK stack..."
npx cdk deploy --profile maverick-cdk --require-approval never --outputs-file outputs.json

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå CDK deployment failed${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ CDK stack deployed successfully${NC}"
echo ""

# Step 2: Update Secrets Manager with OpenAI API Key
echo "Step 2: Updating AWS Secrets Manager..."
echo "----------------------------------------"

aws secretsmanager update-secret \
    --profile maverick-cdk \
    --secret-id mavrk/openai/api-key \
    --secret-string "{\"apiKey\":\"$OPENAI_KEY\"}" \
    --region ap-southeast-2

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ OpenAI API key uploaded to Secrets Manager${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Creating new secret (first time deployment)${NC}"
    aws secretsmanager create-secret \
        --profile maverick-cdk \
        --name mavrk/openai/api-key \
        --description "OpenAI API key for MavrkScribe" \
        --secret-string "{\"apiKey\":\"$OPENAI_KEY\"}" \
        --region ap-southeast-2
fi

echo ""

# Step 3: Get API Gateway URL from CDK outputs
echo "Step 3: Configuring MavrkScribe with API endpoint..."
echo "----------------------------------------------------"

# Extract API endpoint from CDK outputs
API_ENDPOINT=$(cat outputs.json | grep -o '"ApiEndpoint": "[^"]*' | grep -o 'https://[^"]*')

if [ -z "$API_ENDPOINT" ]; then
    echo -e "${RED}‚ùå Could not find API endpoint in CDK outputs${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ API Endpoint: $API_ENDPOINT${NC}"

# Update aws-config.js with the actual endpoint
cd /Users/akshaykumar/Desktop/MavrkScribe

cat > aws-config.js << EOF
// AWS Backend Configuration
// Auto-generated by deploy.sh

const AWS_CONFIG = {
    // API Gateway endpoint
    API_ENDPOINT: '$API_ENDPOINT',

    // Specific endpoints
    NOTE_GENERATION_ENDPOINT: 'note/generate',
    SUBSCRIPTION_CHECK_ENDPOINT: 'subscription/check',

    // AWS Region
    REGION: 'ap-southeast-2'
};

// Helper function to construct full URL
function getApiUrl(endpoint) {
    return \`\${AWS_CONFIG.API_ENDPOINT}\${endpoint}\`;
}

module.exports = {
    AWS_CONFIG,
    getApiUrl
};
EOF

echo -e "${GREEN}‚úÖ Updated aws-config.js with API endpoint${NC}"
echo ""

# Step 4: Build the Electron app
echo "Step 4: Building MavrkScribe for distribution..."
echo "------------------------------------------------"

# Install dependencies if needed
npm install

# Build for current platform
echo "Building for macOS..."
npm run dist

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ MavrkScribe built successfully${NC}"
    echo ""
    echo "üì¶ Your app is ready in the dist/ folder:"
    ls -la dist/*.dmg 2>/dev/null || ls -la dist/mac*/MavrkScribe.app 2>/dev/null
else
    echo -e "${RED}‚ùå Build failed${NC}"
    exit 1
fi

echo ""
echo "=========================================="
echo -e "${GREEN}üéâ Deployment Complete!${NC}"
echo "=========================================="
echo ""
echo "Your MavrkScribe app is now:"
echo "‚úÖ Using secure AWS backend for OpenAI calls"
echo "‚úÖ API keys stored securely in AWS Secrets Manager"
echo "‚úÖ Ready for distribution"
echo ""
echo "API Endpoints:"
echo "- Note Generation: ${API_ENDPOINT}note/generate"
echo "- Subscription Check: ${API_ENDPOINT}subscription/check"
echo ""
echo "Next steps:"
echo "1. Test the app from dist/ folder"
echo "2. Distribute to users - they don't need API keys!"
echo "3. Monitor usage in AWS CloudWatch"
echo ""
echo "To update the OpenAI key later:"
echo "aws secretsmanager update-secret --profile maverick-cdk --secret-id mavrk/openai/api-key --secret-string '{\"apiKey\":\"NEW_KEY\"}' --region ap-southeast-2"